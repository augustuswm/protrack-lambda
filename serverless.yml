# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: protrack-lambda

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.20.2"

provider:
  name: aws
  runtime: nodejs6.10
  region: ${file(./env.json):AWS_REGION}
  stackTags:
    service: protrack-lambda
  stage: ${opt:stage, self:custom.defaultStage}
  environment:
    ES_ENDPOINT: ${file(./env.json):ES_ENDPOINT}
    PROTRACK_TZ: ${file(./env.json):PROTRACK_TZ}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: ${file(./env.json):ES_ARN}
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:GetObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "protrack-schedule-ingest"
            - ${self:provider.stage}
            - "/"
            - "*"

functions:
  ingest:
    handler: handler.ingest
    memorySize: 1024
    timeout: 300
    events:
      - s3:
          bucket: protrack-schedule-ingest-${self:provider.stage}
          event: s3:ObjectCreated:*

  channel:
    handler: handler.channel
    memorySize: 512
    events:
      - http:
          path: channel/{channel}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  show:
    handler: handler.show
    memorySize: 512
    events:
      - http:
          path: show/{show}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  episode:
    handler: handler.episode
    memorySize: 128
    events:
      - http:
          path: episode/{episode}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  version:
    handler: handler.version
    memorySize: 128
    events:
      - http:
          path: episode/{episode}/version/{version}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

  search:
    handler: handler.search
    memorySize: 512
    events:
      - http:
          path: search/{term}
          method: get
          integration: lambda-proxy
          cors:
            origins:
              - '*'

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-webpack

package:
  exclude:
    - .serverless
    - .flowconfig
    - .gitignore
    - LICENSE
    - README.md
    - env.json
    - package.json
    - serverless.yml

custom:
  defaultStage: dev
  webpackIncludeModules:
    packagePath: './package.json'